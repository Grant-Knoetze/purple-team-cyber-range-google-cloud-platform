# Set up the environment
# Export the following variables to your environment for use throughout the tutorial.
# Note: The TF_ADMIN variable will be used for the name of the Terraform Admin Project and must be unique
# You can find the values for YOUR_ORG_ID and YOUR_BILLING_ACCOUNT_ID using the following commands
# inside GCP Cloud Shell (gcloud organizations list, gcloud beta billing accounts list)

export TF_VAR_org_id=YOUR_ORG_ID
export TF_VAR_billing_account=YOUR_BILLING_ACCOUNT_ID
export TF_ADMIN=${USER}-terraform-admin
export TF_CREDS=~/.config/gcloud/${USER}-terraform-admin.json

#Create the Terraform Admin Project
# Using an Admin Project for your Terraform service account keeps the resources needed for managing your projects separate from the actual projects you create.
# While these resources could be created with Terraform using a service account from an existing project, or using Cloud Shell.

gcloud projects create ${TF_ADMIN} \
  --organization ${TF_VAR_org_id} \
  --set-as-default

gcloud beta billing projects link ${TF_ADMIN} \
  --billing-account ${TF_VAR_billing_account}

# Create the Terraform service account
# Create the service account in the Terraform admin project and download the JSON credentials:

gcloud iam service-accounts create terraform \
  --display-name "Terraform admin account"

gcloud iam service-accounts keys create ${TF_CREDS} \
  --iam-account terraform@${TF_ADMIN}.iam.gserviceaccount.com

# Grant the service account permission to view the Admin Project and manage Cloud Storage:

gcloud projects add-iam-policy-binding ${TF_ADMIN} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/viewer

gcloud projects add-iam-policy-binding ${TF_ADMIN} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/storage.admin

# Any actions that Terraform performs require that the API be enabled to do so. In this guide, Terraform requires the following (Use Cloud Shell inside GCP to 
# run the gcloud commands in):

gcloud services enable cloudresourcemanager.googleapis.com
gcloud services enable cloudbilling.googleapis.com
gcloud services enable iam.googleapis.com
gcloud services enable compute.googleapis.com
gcloud services enable serviceusage.googleapis.com

# Add organization/folder-level permissions
# Grant the service account permission to create projects and assign billing accounts:

gcloud organizations add-iam-policy-binding ${TF_VAR_org_id} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/resourcemanager.projectCreator

gcloud organizations add-iam-policy-binding ${TF_VAR_org_id} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/billing.user

# If your billing account is owned by another organization,
# then make sure the service account email address has been added as a Billing Account User to the billing account permissions.

# Set up remote state in Cloud Storage
# Create the remote backend bucket in Cloud Storage and the backend.tf file for storage of the terraform.tfstate file:

gsutil mb -p ${TF_ADMIN} gs://${TF_ADMIN}

cat > backend.tf << EOF
terraform {
 backend "gcs" {
   bucket  = "${TF_ADMIN}"
   prefix  = "terraform/state"
 }
}
EOF

# Enable versioning for the remote bucket (Using Cloud Shell):

gsutil versioning set on gs://${TF_ADMIN}

# Configure your environment for the Google Cloud Terraform provider:

export GOOGLE_APPLICATION_CREDENTIALS=${TF_CREDS}
export GOOGLE_PROJECT=${TF_ADMIN}

export TF_VAR_project_name=${USER}-test-compute
export TF_VAR_region=us-central1